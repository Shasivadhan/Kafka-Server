package com.ksv.producer.kafka; import org.apache.kafka.clients.producer.*; import org.apache.kafka.common.serialization.*; import org.springframework.beans.factory.annotation.*; import org.springframework.context.annotation.*; import org.springframework.kafka.core.*; import org.springframework.kafka.support.serializer.*; import java.util.*; @Configuration public class KafkaProducerConfig { @Value("${spring.kafka.bootstrap-servers}") private String bootstrap; @Bean public ProducerFactory<String,Object> producerFactory(){ Map<String,Object> c=new HashMap<>(); c.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,bootstrap); c.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class); c.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,JsonSerializer.class); c.put(JsonSerializer.ADD_TYPE_INFO_HEADERS,false); c.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, ReverseKeyPartitioner.class); c.put(ProducerConfig.ACKS_CONFIG,"all"); c.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG,true); return new DefaultKafkaProducerFactory<>(c);} @Bean public KafkaTemplate<String,Object> kafkaTemplate(){ return new KafkaTemplate<>(producerFactory()); } }